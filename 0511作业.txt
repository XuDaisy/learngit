demo4.js
1    2    3

原因：所有同步任务都会在主线程上执行（执行栈），主线程之外存在任务列队 ，异步任务在其中等待同步任务完成,异步任务结束等待状态。process.nextTick()在执行栈的尾部触发,在同步与异步之间运行



callkack.js
0
   1
所有异步任务被放在任务列队中等待执行



demo7.js
同步读取：文件内容
程序执行完毕。
异步读取:文件内容

原因：所有同步任务都在主线程上执行，所有异步任务被放在任务列队中等待执行，一旦同步任务执行完毕， 系统读取任务列队， 异步任务进入执行栈再去执行。



IO.js
1）执行结果:
XXX
程序执行结束

2）执行结果:
程序执行结束
XXX

原因：阻塞和非阻塞是一种读取或者写入操作函数的实现方式，是进程在访问数据时根据IO操作就绪状态来采取的不同方式。阻塞方式下读取或者写入函数将一直等待，非阻塞方式下，会立即返回一个状态值。
